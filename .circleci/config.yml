version: 2.1

commands:
  destroy-environment:
    description: Destroy AWS infrastructure for rollback
    steps:
      - run:
          name: Clean up frontend S3 bucket
          when: on_fail
          command: |
            echo "Cleaning up S3 frontend bucket..."
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive
      - run:
          name: Destroy CloudFormation stacks
          when: on_fail
          command: |
            echo "Cleaning up CloudFormation stacks..."
            aws cloudformation delete-stack \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}"
            aws cloudformation delete-stack \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            STATE=$(curl -H "token: $MEMSTASH_TOKEN" --request GET https://api.memstash.io/values/migrations-$CIRCLE_WORKFLOW_ID)
            if [ $STATE==success ] ; then
              cd ~/project/backend
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: cimg/node:12.22.1
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-frontend-{{ checksum "frontend/package-lock.json" }}
            - node-frontend-
      - run:
          name: Build front-end
          command: |
            cd frontend/
            npm i
            npm run build:prod
      - save_cache:
          paths: [frontend/node_modules, frontend/dist]
          key: node-frontend-{{ checksum "frontend/package-lock.json" }}

  build-backend:
    docker:
      - image: cimg/node:12.22.1
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-backend-{{ checksum "backend/package-lock.json" }}
            - node-backend-
      - run:
          name: Back-end build
          command: |
            cd backend/
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules, backend/dist]
          key: node-backend-{{ checksum "backend/package-lock.json" }}

  test-frontend:
    docker:
      - image: cimg/node:12.22.1
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-frontend-{{ checksum "frontend/package-lock.json" }}
            - node-frontend-
      - run:
          name: Test frontend
          command: |
            cd frontend/
            npm run test

  test-backend:
    docker:
      - image: cimg/node:12.22.1
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-backend-{{ checksum "backend/package-lock.json" }}
            - node-backend-
      - run:
          name: Test backend
          command: |
            cd backend/
            npm run test

  scan-frontend:
    docker:
      - image: cimg/node:12.22.1
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-frontend-{{ checksum "frontend/package-lock.json" }}
            - node-frontend-
      - run:
          name: Analyze frontend
          command: |
            cd frontend/
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:12.22.1
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-backend-{{ checksum "backend/package-lock.json" }}
            - node-backend-
      - run:
          name: Analyze backend
          command: |
            cd backend/
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      # Using custom aws-cli image that supports tar utility
      - image: mikesir87/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy backend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-project \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" EC2PubKey="${UDACITY_PUB_KEY}"
      - run:
          name: Deploy frontend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-project \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Append backend EC2 ip to Ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/project/.circleci
          paths:
            - ansible/inventory.txt
            - ansible
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.8-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "56:1f:40:a9:88:18:e6:ac:e6:92:52:44:c2:bd:90:95"
      - attach_workspace:
          at: ~/project/.circleci
      - run:
          name: Install Ansible and AWS CLI
          command: |
            apk -U add ansible
            pip install awscli
      - run:
          name: Configure server with Ansible Playbook
          command: |
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:12.22.1
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-backend-{{ checksum "backend/package-lock.json" }}
            - node-backend-
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install awscli -y
      - run:
          name: Configure environment for migrations
          command: |
            echo ENVIROMENT=production > "backend/.env"
            echo NODE_ENV=production > "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
      - run:
          name: Run migrations and save result to memstash
          command: |
            cd backend/
            npm run migrations >> migrations.log
            if ( grep -q "has been executed successfully" migrations.log ) || \
            ( grep -q "No migrations are pending" migrations.log ) ; then
              echo "Migrations were succesful!"
              curl -H "Content-Type: text/plain" -H "token: $MEMSTASH_TOKEN" --request PUT --data "success" https://api.memstash.io/values/migrations-$CIRCLE_WORKFLOW_ID
            else
              echo "ERROR: Migrations failed!"
              curl -H "Content-Type: text/plain" -H "token: $MEMSTASH_TOKEN" --request PUT --data "fail" https://api.memstash.io/values/migrations-$CIRCLE_WORKFLOW_ID
              exit 1
            fi
      - revert-migrations
      - destroy-environment

  deploy-frontend:
    docker:
      - image: cimg/node:12.22.1
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-frontend-{{ checksum "frontend/package-lock.json" }}
            - node-frontend-
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install awscli -y
      - run:
          name: Get backend url and make it available to env
          command: |
            BACKEND_IP=$(aws cloudformation describe-stacks \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --query 'Stacks[0].Outputs[0].OutputValue' \
              --output text)
            export API_URL="${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo "API_URL=$API_URL" > frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend/
            npm run build:prod
            cd dist/
            aws s3 cp . s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive
      - destroy-environment

  deploy-backend:
    docker:
      - image: python:3.8-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "56:1f:40:a9:88:18:e6:ac:e6:92:52:44:c2:bd:90:95"
      - run:
          name: Install dependencies
          command: |
            apk -U add ansible tar rsync
            pip install awscli
            ansible-galaxy collection install ansible.posix
      - attach_workspace:
          at: ~/project/.circleci
      - restore_cache:
          keys:
            - node-backend-{{ checksum "backend/package-lock.json" }}
            - node-backend-
      - run:
          name: Deploy backend
          command: |
            echo [defaults] > ~/.ansible.cfg
            echo "host_key_checking = False" >> ~/.ansible.cfg
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
      - destroy-environment

  smoke-test:
    docker:
      - image: cimg/node:12.22.1
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install awscli -y
      - restore_cache:
          keys:
            - node-backend-{{ checksum "backend/package-lock.json" }}
            - node-backend-
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws cloudformation describe-stacks \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --query 'Stacks[0].Outputs[0].OutputValue' \
              --output text)
            cat $BACKEND_IP > ~/project/backend-url.txt
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_URL=$( cat ~/project/backend-url.txt )
            if curl -s ${BACKEND_URL}:3030/api/status"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND-URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-eu-west-2.amazonaws.com"
            if curl -s ${FRONTEND-URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - revert-migrations
      - destroy-environment

  cloudfront-update:
    docker:
      - image: cimg/node:12.22.1
    steps:
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install awscli -y
      - restore_cache:
          keys:
            - node-backend-{{ checksum "backend/package-lock.json" }}
            - node-backend-
      - run:
          name: Update cloudfront distribution
          command: |
             aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name udapeople-cloudfront \
              --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID} \
              --tags project=udapeople-project
      - revert-migrations
      - destroy-environment
# cleanup:
#   docker:
#     # Docker image here
#   steps:
#     # Checkout code from git
#     - run:
#         name: Get old stack workflow id
#         command: |
#           # your code here
#           export OldWorkflowID="the id here"
#           export STACKS=[] #put the list of stacks here
#     - run:
#         name: Remove old stacks and files
#         command: |
#           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#           then
#             # your code here
#           fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
